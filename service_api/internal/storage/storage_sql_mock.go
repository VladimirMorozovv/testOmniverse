// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"context"
	"sync"
)

// Ensure, that IStorageSQLMock does implement IStorageSQL.
// If this is not the case, regenerate this file with moq.
var _ IStorageSQL = &IStorageSQLMock{}

// IStorageSQLMock is a mock implementation of IStorageSQL.
//
//	func TestSomethingThatUsesIStorageSQL(t *testing.T) {
//
//		// make and configure a mocked IStorageSQL
//		mockedIStorageSQL := &IStorageSQLMock{
//			GetProductFunc: func(ctx context.Context, limit int, offset int) ([]Product, error) {
//				panic("mock out the GetProduct method")
//			},
//		}
//
//		// use mockedIStorageSQL in code that requires IStorageSQL
//		// and then make assertions.
//
//	}
type IStorageSQLMock struct {
	// GetProductFunc mocks the GetProduct method.
	GetProductFunc func(ctx context.Context, limit int, offset int) ([]Product, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetProduct holds details about calls to the GetProduct method.
		GetProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
	}
	lockGetProduct sync.RWMutex
}

// GetProduct calls GetProductFunc.
func (mock *IStorageSQLMock) GetProduct(ctx context.Context, limit int, offset int) ([]Product, error) {
	if mock.GetProductFunc == nil {
		panic("IStorageSQLMock.GetProductFunc: method is nil but IStorageSQL.GetProduct was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}{
		Ctx:    ctx,
		Limit:  limit,
		Offset: offset,
	}
	mock.lockGetProduct.Lock()
	mock.calls.GetProduct = append(mock.calls.GetProduct, callInfo)
	mock.lockGetProduct.Unlock()
	return mock.GetProductFunc(ctx, limit, offset)
}

// GetProductCalls gets all the calls that were made to GetProduct.
// Check the length with:
//
//	len(mockedIStorageSQL.GetProductCalls())
func (mock *IStorageSQLMock) GetProductCalls() []struct {
	Ctx    context.Context
	Limit  int
	Offset int
} {
	var calls []struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}
	mock.lockGetProduct.RLock()
	calls = mock.calls.GetProduct
	mock.lockGetProduct.RUnlock()
	return calls
}
